machine:
  timezone:
    Europe/Berlin
  java:
    version: oraclejdk8
  environment:
    MAKEFLAGS: "j4"
# --- Android build ---
    _toolchain_: "/home/ubuntu/c-toxcore/toolchains/"
    _s_: "/home/ubuntu/c-toxcore/src/"
    AND_PATH: "$_toolchain_/arm-linux-androideabi/bin:$PATH"
    AND_PKG_CONFIG_PATH: "$_toolchain_/arm-linux-androideabi/sysroot/usr/lib/pkgconfig"
    AND_CC: "$_toolchain_/arm-linux-androideabi/bin/arm-linux-androideabi-clang"
    AND_GCC: "$_toolchain_/arm-linux-androideabi/bin/arm-linux-androideabi-gcc"
    AND_CXX: "$_toolchain_/arm-linux-androideabi/bin/arm-linux-androideabi-clang++"
    AND_READELF: "$_toolchain_/arm-linux-androideabi/bin/arm-linux-androideabi-readelf"
# --- Android build ---

    # ---------------------------------------------------
    # c-toxcore v0.1.7 48c86e942d487a8856cbd25797b320bfb1879ddc
    # c-toxcore v0.1.6 895de7ef26e7617769f2271345e414545c2581f8
    # c-toxcore v0.1.5 995578f1038842288c1ff552fd796ab2377db6e1
    # c-toxcore v0.1.4 27a97a8280813ec05a5209811c40ab23203bb292
    # c-toxcore v0.1.3 fdb46f6cf216a866d29402ae991be9c43282dde6
    # c-toxcore v0.1.2 a096c71db867ac83fc3e01e0fbe98573d20f9286
    # ---------------------------------------------------

    # c-toxcore v0.1.7
    AND_CTOXCORE_VERSION: "48c86e942d487a8856cbd25797b320bfb1879ddc"

    _SDK_: /usr/local/android-sdk-linux/
    _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
    JAVA_OPTS: "-Xms512m -Xmx1024m"
    GRADLE_OPTS: '-Xmx512m -Dorg.gradle.jvmargs="-Xmx1700m -XX:+HeapDumpOnOutOfMemoryError -XX:MaxPermSize=1700m"'
    CLASS_P: com.zoffcc.applications.trifa
    START_INTENT_P: com.zoffcc.applications.trifa.MainActivity

    ZEMU_: "appemu23"
    EMU_: "appemu21"
    XEMU_: "appemu10"
    Zsdpath: "/sdcard"
    sdpath: "/storage/sdcard"
    Xsdpath: "/mnt/sdcard"

dependencies:
  pre:
  - sudo apt-get update
  - sudo apt-get install clang
  - sudo apt-get install build-essential libtool autotools-dev automake checkinstall check yasm
  - sudo apt-get install pkg-config

# ------------ network_test requires that "localhost" resolves to ::1 ------------
  - sudo bash -c "echo '::1             localhost ipv6-localhost ipv6-loopback' >> /etc/hosts" # ipv6 localhost entry
# ------------ network_test requires that "localhost" resolves to ::1 ------------

  - java -version ; exit 0
  - gcc --version ; exit 0
  - clang --version ; exit 0

  - mkdir -p /home/ubuntu/c-toxcore # workaround :-)


  - sudo apt-get install xdotool > /dev/null 2> /dev/null
  - sudo apt-get install telnet > /dev/null 2> /dev/null
  - sudo apt-get install x11-utils > /dev/null 2> /dev/null
  - sudo apt-get install xvkbd > /dev/null 2> /dev/null
  - sudo apt-get install qrencode > /dev/null 2> /dev/null
  - sudo apt-get install p7zip-full

  - echo y | android update sdk --no-ui --all --filter "tools"
  - android list sdk --all | grep -i tools
  - android list sdk --all --extended
  - echo y | android update sdk --no-ui --all --filter "tools"

  - echo y | android update sdk --no-ui --all --filter build-tools-23.0.3
  - echo y | android update sdk --no-ui --all --filter build-tools-24.0.2
  - echo y | android update sdk --no-ui --all --filter build-tools-24.0.3
  - echo y | android update sdk --no-ui --all --filter build-tools-25.0.2
  - echo y | android update sdk --no-ui --all --filter android-16 ; exit 0
  - echo y | android update sdk --no-ui --all --filter android-21
  - echo y | android update sdk --no-ui --all --filter android-23
  - echo y | android update sdk --no-ui --all --filter android-24
  - echo y | android update sdk --no-ui --all --filter android-25
  - echo y | android update sdk --no-ui --all --filter platform-tools

  - echo y | android update sdk --no-ui --all --filter extra-android-m2repository > /dev/null 2> /dev/null
  - echo y | android update sdk --no-ui --all --filter extra-google-m2repository > /dev/null 2> /dev/null
  - echo y | android update sdk --no-ui --all --filter extra-android-support > /dev/null 2> /dev/null

  - echo y | android update sdk --no-ui --all --filter platform-tools-preview > /dev/null 2> /dev/null
  - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-21
  - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-23 > /dev/null 2> /dev/null
  - echo y | android update sdk --no-ui --all --filter sys-img-armeabi-v7a-addon-google_apis-google-23 > /dev/null 2> /dev/null
  - echo y | android update sdk --no-ui --all --filter addon-google_apis-google-23 > /dev/null 2> /dev/null

  - echo ${ANDROID_HOME} ; exit 0
  - ls -al "${ANDROID_HOME}/licenses" ; exit 0

  - mkdir -p "${ANDROID_HOME}/licenses" ;
    echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "${ANDROID_HOME}/licenses/android-sdk-license" ;
    echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > "${ANDROID_HOME}/licenses/android-sdk-preview-license" ;
    echo -e "\nd975f751698a77b662f1254ddbeed3901e976f5a" > "${ANDROID_HOME}/licenses/intel-android-extra-license"

compile:
  override:

# --- Android build ---
  - echo 'export PATH="$AND_PATH";export PKG_CONFIG_PATH="$AND_PKG_CONFIG_PATH";export READELF="$AND_READELF";export GCC="$AND_GCC";export CC="$AND_CC";export CXX="$AND_CXX";export CPPFLAGS="";export LDFLAGS=""' > ~/pp
  - chmod u+x ~/pp
  - mkdir -p "$_s_"

  - rm -Rf /home/ubuntu/install_dest/ ; mkdir -p /home/ubuntu/install_dest/
  - mkdir -p $CIRCLE_ARTIFACTS/android/


  - . ~/pp;mkdir -p "$PKG_CONFIG_PATH"
  - . ~/pp;curl -s http://dl.google.com/android/repository/android-ndk-r13b-linux-x86_64.zip -o android-ndk-r13b-linux-x86_64.zip
  - . ~/pp;unzip android-ndk-r13b-linux-x86_64.zip
  - . ~/pp;mv -v /home/ubuntu/ToxAndroidRefImpl/android-ndk-r13b /home/ubuntu/android-ndk
  - . ~/pp;/home/ubuntu/android-ndk/build/tools/make_standalone_toolchain.py --arch arm --install-dir "$_toolchain_"/arm-linux-androideabi --api 12 --force   

  - . ~/pp;cd $_s_;git clone --depth=1 --branch=v1.3.0 https://github.com/yasm/yasm.git
  - . ~/pp;cd $_s_/yasm/;autoreconf -fi
  - . ~/pp;rm -Rf ~/build/
  - . ~/pp;mkdir -p ~/build/
  - . ~/pp;cd ~/build/;$_s_/yasm/configure --prefix="$_toolchain_"/arm-linux-androideabi/sysroot/usr --disable-shared --disable-soname-versions --host=arm-linux-androideabi --with-sysroot="$_toolchain_"/arm-linux-androideabi/sysroot
  - . ~/pp;cd ~/build/;make -j4
  - . ~/pp;cd ~/build/;make install


  - . ~/pp;cd $_s_;git clone --depth=1 --branch=v1.6.0 https://github.com/webmproject/libvpx.git
  - . ~/pp;rm -Rf ~/build/
  - . ~/pp;mkdir -p ~/build/
  - . ~/pp;cd ~/build/;$_s_/libvpx/configure --prefix="$_toolchain_"/arm-linux-androideabi/sysroot/usr --disable-examples --disable-unit-tests --sdk-path=/home/ubuntu/android-ndk --target=armv7-android-gcc
  - . ~/pp;cd ~/build/;make -j4
  - . ~/pp;cd ~/build/;make install
  - . ~/pp;cd ~/build/;make clean
  - rm -Rf /home/ubuntu/install_dest/ ; mkdir -p /home/ubuntu/install_dest/
  - . ~/pp;cd ~/build/;make DESTDIR=/home/ubuntu/install_dest/ install
  - cd /home/ubuntu/install_dest/ ; cd home/ubuntu/c-toxcore/toolchains/arm-linux-androideabi/sysroot/ ; zip -r $CIRCLE_ARTIFACTS/android/libvpx.zip *


  - . ~/pp;cd $_s_;git clone --depth=1 --branch=v1.1.3 https://github.com/xiph/opus.git
  - . ~/pp;cd $_s_/opus/;autoreconf -fi
  - . ~/pp;rm -Rf ~/build/
  - . ~/pp;mkdir -p ~/build/
  - . ~/pp;cd ~/build/;$_s_/opus/configure --prefix="$_toolchain_"/arm-linux-androideabi/sysroot/usr --disable-shared --disable-soname-versions --host=arm-linux-androideabi --with-sysroot="$_toolchain_"/arm-linux-androideabi/sysroot
  - . ~/pp;cd ~/build/;make -j4
  - . ~/pp;cd ~/build/;make install
  - . ~/pp;cd ~/build/;make clean
  - rm -Rf /home/ubuntu/install_dest/ ; mkdir -p /home/ubuntu/install_dest/
  - . ~/pp;cd ~/build/;make DESTDIR=/home/ubuntu/install_dest/ install
  - cd /home/ubuntu/install_dest/ ; cd home/ubuntu/c-toxcore/toolchains/arm-linux-androideabi/sysroot/ ; zip -r $CIRCLE_ARTIFACTS/android/opus.zip *
    
    
  - . ~/pp;cd $_s_;git clone --depth=1 --branch=1.0.11 https://github.com/jedisct1/libsodium.git
  - . ~/pp;cd $_s_/libsodium/;autoreconf -fi
  - . ~/pp;rm -Rf ~/build/
  - . ~/pp;mkdir -p ~/build/
  - . ~/pp;cd ~/build/;$_s_/libsodium/configure --prefix="$_toolchain_"/arm-linux-androideabi/sysroot/usr --disable-shared --disable-soname-versions --host=arm-linux-androideabi --with-sysroot="$_toolchain_"/arm-linux-androideabi/sysroot --enable-minimal --disable-pie
  - . ~/pp;cd ~/build/;make -j4
  - . ~/pp;cd ~/build/;make install
  - . ~/pp;cd ~/build/;make clean
  - rm -Rf /home/ubuntu/install_dest/ ; mkdir -p /home/ubuntu/install_dest/
  - . ~/pp;cd ~/build/;make DESTDIR=/home/ubuntu/install_dest/ install
  - cd /home/ubuntu/install_dest/ ; cd home/ubuntu/c-toxcore/toolchains/arm-linux-androideabi/sysroot/ ; zip -r $CIRCLE_ARTIFACTS/android/libsodium.zip *


  # --- get wanted c-toxcore version ---
  # ---- git does not clone into existing dir. why? --> so use workaround here ---
  - cd ~/ ; git clone https://github.com/TokTok/c-toxcore ~/tmp111
  - cd ~/ ; mv -v ~/tmp111/.??* c-toxcore/
  - cd ~/ ; mv -v ~/tmp111/* c-toxcore/
  - cd ~/ ; ls -al ~/tmp111/
  - cd ~/ ; rm -Rf ~/tmp111
  # ---- git does not clone into existing dir. why? --> so use workaround here ---
  - cd ~/c-toxcore/ ; git checkout "$AND_CTOXCORE_VERSION"
  - ls -al ~
  - ls -al ~/c-toxcore/
  # --- get wanted c-toxcore version ---

  - . ~/pp;cd ~/c-toxcore/;autoreconf -fi
  - . ~/pp;rm -Rf ~/build/
  - . ~/pp;mkdir -p ~/build/
  - . ~/pp;cd ~/build/;~/c-toxcore/configure --prefix="$_toolchain_"/arm-linux-androideabi/sysroot/usr --disable-soname-versions --host=arm-linux-androideabi --with-sysroot="$_toolchain_"/arm-linux-androideabi/sysroot --disable-testing --disable-rt
  - . ~/pp;cd ~/build/;make -j4
  - . ~/pp;cd ~/build/;make install
  - . ~/pp;cd ~/build/;make clean
  - rm -Rf /home/ubuntu/install_dest/ ; mkdir -p /home/ubuntu/install_dest/
  - . ~/pp;cd ~/build/;make DESTDIR=/home/ubuntu/install_dest/ install
  - cd /home/ubuntu/install_dest/ ; cd home/ubuntu/c-toxcore/toolchains/arm-linux-androideabi/sysroot/ ; zip -r $CIRCLE_ARTIFACTS/android/c-toxcore.zip *


  - mkdir -p $CIRCLE_ARTIFACTS/android/libs/armeabi/
  - mkdir -p $CIRCLE_ARTIFACTS/android/libs/x86/

  - find / -name 'cpu-features*' 2>/dev/null ; exit 0
  - . ~/pp;cd jni-c-toxcore/; find .. -name 'cpu-features*' 2>/dev/null ; exit 0

  - . ~/pp;cd jni-c-toxcore/; $GCC -O2 -shared -funwind-tables -Wl,--no-merge-exidx-entries -shared -Wl,-soname,libjni-c-toxcore.so jni-c-toxcore.c -o libjni-c-toxcore.so -std=gnu99 -I/usr/local/include/ "$_toolchain_"/arm-linux-androideabi/sysroot/usr/lib/libtoxcore.a "$_toolchain_"/arm-linux-androideabi/sysroot/usr/lib/libtoxav.a "$_toolchain_"/arm-linux-androideabi/sysroot/usr/lib/libvpx.a "$_toolchain_"/arm-linux-androideabi/sysroot/usr/lib/libopus.a "$_toolchain_"/arm-linux-androideabi/sysroot/usr/lib/libsodium.a coffeecatch.c coffeejni.c -lm /home/ubuntu/android-ndk/sources/android/cpufeatures/cpu-features.c
  - . ~/pp;cd jni-c-toxcore/; ls -al
  #- . ~/pp;cd jni-c-toxcore/; $STRIP -d libjni-c-toxcore.so
  - . ~/pp;cd jni-c-toxcore/; $READELF -d libjni-c-toxcore.so
  - . ~/pp;cd jni-c-toxcore/; $READELF -a libjni-c-toxcore.so
  - . ~/pp;cd jni-c-toxcore/; $READELF -A libjni-c-toxcore.so
  - . ~/pp;cd jni-c-toxcore/; cp -av libjni-c-toxcore.so $CIRCLE_ARTIFACTS/android/libs/armeabi/

  - cd jni-c-toxcore/; cp -av libjni-c-toxcore.so ../android-refimpl-app/app/nativelibs/armeabi-v7a/
# --- Android build ---


# --------- GRADLE -------------
  - cd android-refimpl-app/ ; chmod a+rx ./gradlew
  - cd android-refimpl-app/ ; ./gradlew build --max-workers=1 --stacktrace --no-daemon || ./gradlew build --stacktrace --no-daemon # first build may FAIL
# --------- GRADLE -------------


# --- save lint output ---
  - cd android-refimpl-app/ ; find . -name '*lint-report*' -exec ls -al {} \; ; exit 0
  - cd android-refimpl-app/ ; cp -av ./app/lint-report.html $CIRCLE_ARTIFACTS/ ; exit 0
  - cd android-refimpl-app/ ; cp -av ./app/lint-report.xml $CIRCLE_ARTIFACTS/ ; exit 0
  - cd android-refimpl-app/ ; cp -av ./lint-report.txt $CIRCLE_ARTIFACTS/ ; exit 0
# --- save lint output ---

# ----------- show generated apk file -----------
  - cd android-refimpl-app/ ; ls -al app/build/outputs/apk/ ; exit 0
  - cd android-refimpl-app/ ; find ./ -name '*.apk' ; exit 0
  - mkdir -p app/build/outputs/apk/
  - cd android-refimpl-app/ ; cp -av ./app/build/outputs/apk/app-release-unsigned.apk ../app/build/outputs/apk/
# ----------- show generated apk file -----------




# ----------- make zipfile for builds [for download-dependencies.sh] -----------
    #- . f;mkdir -p ~/and_stud_prj/app/libs/
    #- . f;cp -av app/libs/tox*jar ~/and_stud_prj/app/libs/
    #- . f;mkdir -p ~/and_stud_prj/app/src/main/jniLibs/
    #- . f;cp -av app/src/main/jniLibs/* ~/and_stud_prj/app/src/main/jniLibs/
    #- . f;cd ~/and_stud_prj/ ; zip -r $CIRCLE_ARTIFACTS/supplement.zip *
# ----------- make zipfile for builds [for download-dependencies.sh] -----------

  - zip -d app/build/outputs/apk/app-release-unsigned.apk META-INF/\*     # remove signature !!
  - cp -av app/build/outputs/apk/app-release-unsigned.apk ~/app.apk ;
    cd ~/ ;
    echo xxxxxxrm -f ~/.android/debug.keystore ;
    ls -al ~/.android/debug.keystore ;
    if [ ! -f ~/.android/debug.keystore ]; then echo "*** generating new signer key ***" ;
    echo "*** generating new signer key ***";
    echo "*** generating new signer key ***";
    keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -keyalg RSA -keysize 2048 -validity 10000 -alias androiddebugkey -keypass android -dname "CN=Android Debug,O=Android,C=US" ;
    fi ;
    ls -al ~/ ;
    jarsigner -verbose -keystore ~/.android/debug.keystore -storepass android -keypass android -sigalg SHA1withRSA -digestalg SHA1 -sigfile CERT -signedjar app-signed.apk app.apk androiddebugkey ;
    ls -al ~/ ;
    $_SDK_/build-tools/23.0.3/zipalign -v 4 app-signed.apk app-signed-aligned.apk ;
    ls -al ~/ ;
    pwd ;
    ls -al ;
    cp -av app-signed-aligned.apk $CIRCLE_ARTIFACTS/${CIRCLE_PROJECT_REPONAME}.apk || exit 1

##   also make apk files with different names for each build (for individual downloads)
  - cp -av $CIRCLE_ARTIFACTS/${CIRCLE_PROJECT_REPONAME}.apk $CIRCLE_ARTIFACTS/${CIRCLE_PROJECT_REPONAME}_circleci_$CIRCLE_SHA1.apk
##   qr code to scan with your phone to directly download the apk file (for convenience)
  - qrencode -o $CIRCLE_ARTIFACTS/QR_apk.png 'https://circle-artifacts.com/gh/'${CIRCLE_PROJECT_USERNAME}'/'${CIRCLE_PROJECT_REPONAME}'/'${CIRCLE_BUILD_NUM}'/artifacts/'${CIRCLE_NODE_INDEX}'/tmp/'`basename $CIRCLE_ARTIFACTS`'/'"${CIRCLE_PROJECT_REPONAME}_circleci_$CIRCLE_SHA1.apk" ; exit 0
##   qr code to go directly to the aritfacts (to scan with phone)
  - qrencode -o $CIRCLE_ARTIFACTS/QR_artifacts.png 'https://circleci.com/gh/'${CIRCLE_PROJECT_USERNAME}'/'${CIRCLE_PROJECT_REPONAME}'/'${CIRCLE_BUILD_NUM}'#artifacts' ; exit 0



  pre:
    - mksdcard -l e 180M sdcard.img
    - echo 'mtools_skip_check=1' > ~/.mtoolsrc
    - android list targets
#
    - if [ "$EMU_" == "appemu23" ]; then echo "no" | android create avd -n appemu23 -f -t android-23 --abi default/armeabi-v7a --skin "WXGA720" ; fi
    - if [ "$EMU_" == "appemu23" ]; then cat ~/.android/avd/appemu23.avd/config.ini ; fi
#
    - if [ "$EMU_" == "appemu21" ]; then echo "no" | android create avd -n appemu21 -f -t android-21 --abi default/armeabi-v7a --skin "WXGA720" ; fi
    - if [ "$EMU_" == "appemu21" ]; then cat ~/.android/avd/appemu21.avd/config.ini ; fi
#
    - if [ "$EMU_" == "appemu10" ]; then echo "no" | android create avd -n appemu10 -f -t android-10 --abi default/armeabi --skin "WQVGA432" ; fi
    - if [ "$EMU_" == "appemu10" ]; then cat ~/.android/avd/appemu10.avd/config.ini ; fi
#
    - echo "$EMU_"
    - echo "$sdpath"

test:
  override:
    - ls -alR "$_toolchain_"/arm-linux-androideabi/sysroot/usr/lib/

    - emulator -avd "$EMU_" -sdcard sdcard.img -no-audio:
        background: true
        parallel: true
    - circle-android wait-for-boot

    - sleep 210 # let the emulator settle down first

    - adb shell input keyevent 82 # remove lock screen on emulator
    - sleep 10
    - import -window root $CIRCLE_ARTIFACTS/capture_emulator_running.png

    - adb shell "cat /proc/meminfo" ; exit 0

    - adb shell ls -al / ; exit 0
    - adb shell ls -al /storage/ ; exit 0
    - adb shell ls -al /sdcard/ ; exit 0

    - adb install ~/app-signed-aligned.apk

    - adb logcat -v time > $CIRCLE_ARTIFACTS/adb_out.txt 2>&1 :
        background: true
    - sleep 60 # let the emulator settle down first

    - adb shell am start -n $CLASS_P/$START_INTENT_P
    - sleep 60
    - sleep 120 # wait to be sure the app has started fully

    - died_count=`cat $CIRCLE_ARTIFACTS/adb_out.txt|grep 'Process. '"$CLASS_P"', PID.'|wc -l|tr -d ' '` ; if [ $died_count -gt 0 ]; then echo "app crashed"; exit 1; fi

    - import -window root $CIRCLE_ARTIFACTS/capture_app_running.png # get proof that the app is running
    - adb shell screencap -p | sed 's/\r$//' > $CIRCLE_ARTIFACTS/capture_app_running_2.png

# ----- CI artifact cleanup -----
    - mkdir -p $CIRCLE_ARTIFACTS/other/
    - mv -v $CIRCLE_ARTIFACTS/adb_out.txt $CIRCLE_ARTIFACTS/other/ ; exit 0
    - mv -v $CIRCLE_ARTIFACTS/stderr*.txt $CIRCLE_ARTIFACTS/other/ ; exit 0
    - mv -v $CIRCLE_ARTIFACTS/stdout*.txt $CIRCLE_ARTIFACTS/other/ ; exit 0
# ----- CI artifact cleanup -----


